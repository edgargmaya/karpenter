Azure App Registration: Key Sections
App Registration in Azure Entra ID (Azure AD) is a process that allows applications to authenticate against Azure Cloud and access resources like Microsoft APIs, custom APIs, or even APIs from other services. Through App Registration,
developers can manage how their applications authenticate users, request permissions, and interact with resources in a secure and controlled manner.

In this report, we will explore the most relevant sections of Azure App Registration and explain how each one functions, along with their key features.


1. Authentication
The Authentication section of App Registration is where you configure how users will authenticate with your application. This is particularly important for web apps, mobile apps, and APIs. Here are the key components of this section:

Redirect URIs: A redirect URI is where the application sends the authentication response. This is necessary for apps that use OAuth2 or OpenID Connect, such as web or mobile apps. When a user successfully logs in, they are redirected to this URI.

Platform Configurations: You can specify the platform your app runs on (Web, Single Page Applications (SPA), Mobile/desktop). Each platform has unique authentication settings.

In summary, this section is essential for defining how users or services authenticate and how tokens are returned to the application.


2. Certificates & Secrets
The Certificates & Secrets section is used to securely authenticate the application itself, especially when it acts without user intervention (such as in a background service). This section offers two methods of authentication:

Client Secrets: A Client Secret is a string (similar to a password) that your app uses to authenticate. Client Secrets have expiration dates and need to be periodically regenerated for security reasons.
Certificates: Instead of using a secret, apps can use certificates for authentication. A certificate is more secure than a secret because it involves public and private keys. The certificate is stored in Azure AD, and when your app requests a token, it signs the request using the private key.

When to use:
Client Secrets are easier to manage but less secure than certificates.
Certificates are more secure and recommended for production environments, particularly for backend services and APIs.


3. Token Configuration
The Token Configuration section allows you to define what claims (pieces of information) are included in tokens that your app receives, such as ID tokens or Access tokens. These claims can contain information about the user such as (email, groups)
or attributes of the app itself.

ID tokens: Used for OpenID Connect, containing information about the user who has been authenticated.
Access tokens: Used to access resources like APIs.

In this section, you can add claims such as email, groups, or roles to the tokens or configure specific claims required by your app to function properly.
A good exmple of this, could be: if your application needs to know the groups a user belongs to, you can configure Azure Entra ID to include the groups claim in the token. This avoids making additional API calls to fetch that data.


4. API Permissions
The API Permissions section is where you define what resources your app can access. You can request permissions for both Microsoft APIs (such as Microsoft Graph) and custom APIs.

There are two types of permissions:
Delegated permissions: Used when the app is acting on behalf of a signed-in user. The user's permissions are required to access resources.
Application permissions: Used when the app is acting on its own (e.g., a background service). This grants the app permissions to access resources independently.
For example, if your app needs to read the emails of users in Microsoft 365, you would request the Mail.Read permission in this section.


5. Expose an API
The Expose an API section is for applications that provide an API that other applications can call. This is where you configure how external apps can authenticate and access your app’s resources.

Application ID URI: This is a unique URI that other applications will use to identify and request access to your API.
Scopes: These define what permissions other apps can request when accessing your API. For example, you could define a scope called read_data that allows external apps to read data from your API.

This section is crucial if you are building a service that will be consumed by other apps, as it allows you to define how access is controlled and authenticated.


6. App Roles
The App Roles section allows you to define roles within your application that can be assigned to users or other applications. Roles are useful when you need to control what different users or apps can do within your application.

For example, you could define roles such as Admin, Editor, or Viewer, and then assign these roles to users or apps to restrict or grant access to certain features or data.

Roles are typically included in the Access Token as a claim, and your application can use this information to enforce permissions.


7. Manifest
The Manifest is a JSON file that contains the full configuration of the App Registration. You can directly edit the manifest to configure settings that are not exposed in the Azure portal’s UI. This gives you more granular control over your
app’s behavior.

Key Attribute: accessTokenAcceptedVersion
One of the most important attributes in the Manifest is accessTokenAcceptedVersion. This attribute defines the version of the Access Token format that your app will accept. Azure AD has evolved over time, and different token versions have
been introduced to improve security and functionality.

Possible Values for accessTokenAcceptedVersion:
0: Accepts v1.0 Access Tokens.
2: Accepts v2.0 Access Tokens.
Differences Between v1.0 and v2.0 Access Tokens:

v1.0 Tokens:
Issued by Azure AD and primarily used for Microsoft APIs (such as Microsoft Graph).
These tokens are designed for single-tenancy applications (i.e., applications that are meant for use within one organization).
Audience (aud): In v1.0 tokens, the audience field is the App ID URI.
More limited in terms of flexibility for multi-tenancy or external use.

v2.0 Tokens:
Designed to work with multiple APIs and support multi-tenancy. They can be used for both Microsoft APIs and custom APIs.
These tokens provide more flexible scopes and allow you to define permissions at a more granular level.
Audience (aud): In v2.0 tokens, the audience is typically the Application ID.
Scopes: v2.0 tokens use the scp claim to specify the scopes that the app is allowed to access.

Remember to use version number 2 for App Registration at Hartreepartners, since the entire authentication schema we use, is based on this version.
